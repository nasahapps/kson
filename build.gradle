buildscript {
    ext.kotlin_version = "1.3.11"

    repositories {
        jcenter()
        maven { url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-native-gradle-plugin:$kotlin_version"
    }
}

repositories {
    jcenter()
}

apply plugin: "kotlin-multiplatform"
apply plugin: "maven-publish"

group = "com.nasahapps.kson"
version = "1.0"

kotlin {
    targets {
        fromPreset(presets.jvm, "jvm")

        final def nativeTarget = System.getenv("SDK_NAME")?.startsWith("macos") ? presets.macosX64
                : System.getenv("SDK_NAME")?.startsWith("iphoneos") ? presets.iosArm64
                : presets.iosX64
        fromPreset(nativeTarget, 'native') {
            compilations.main.outputKinds("FRAMEWORK")
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
            }
        }
        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
                implementation "org.json:json:20180813"
            }
        }
        jvmTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
                implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
            }
        }
        nativeMain {
            dependencies {

            }
        }
    }
}

task iosTest {
    dependsOn "linkTestDebugExecutableNative"
    doLast {
        def binary = kotlin.targets.native.compilations.test.getBinary("EXECUTABLE", "DEBUG")
        exec {
            commandLine "xcrun", "simctl", "spawn", "iPhone SE", binary.absolutePath
        }
    }
}

check.dependsOn iosTest